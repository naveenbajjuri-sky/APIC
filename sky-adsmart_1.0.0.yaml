swagger: "2.0"
info:
  title: Sky_Adsmart
  x-ibm-name: sky-adsmart
  version: 1.0.0
host: $(catalog.host)
schemes:
- https
basePath: /adsmart2/v1/campaigns
produces:
- application/xml
consumes:
- application/xml
security:
- {}
securityDefinitions:
  clientSecretHeader:
    type: apiKey
    name: X-IBM-Client-Secret
    in: header
    x-key-type: client_secret
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - gatewayscript:
        version: 2.0.0
        title: GS-ExtractInputLoggingData
        source: "//Extract general metadata from system variables\nvar apim = require('apim');\nvar
          apiStartTimeMS = (new Date()).getTime();\napim.setvariable('apiStartTimeMS',
          apiStartTimeMS);\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
          apicTxId = \"\";\nif (apim.getvariable('request.headers.apic-transaction-id')){\n
          \   apicTxId = apim.getvariable('request.headers.apic-transaction-id');\n}\nelse
          {\n    apicTxId = uuidv4();\n}\napim.setvariable('apic-transaction-id',
          apicTxId);\napim.setvariable('message.headers.apic-transaction-id', apicTxId);\n\nvar
          xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');\n\n//Extract
          client metadata from system variables\nvar clientIPAddress = apim.getvariable('request.headers.x-client-ip');\nvar
          clientId = apim.getvariable('client.app.id');\nvar clientAppName = apim.getvariable('client.app.name');\nvar
          clientAppType = apim.getvariable('client.app.type');\nvar clientOrgName
          = apim.getvariable('client.org.name');\n\n//Extract api metadata from system
          variables\nvar apiName = apim.getvariable('api.name');\nvar apiVersion =
          apim.getvariable('api.version');\nvar providerOrgName = apim.getvariable('api.org.name');\nvar
          catalogName = apim.getvariable('env.path');\nvar apiBasePath = apim.getvariable('api.root');\nvar
          operationPath = apim.getvariable('api.operation.path');\n\n\n//Extract product
          metadata from system variables\n//var productName = apim.getvariable('product.name');\n//var
          productVersion = apim.getvariable('product.version');\nvar planName = apim.getvariable('plan.name');\nvar
          planVersion = apim.getvariable('plan.version');\nvar planRateLimit = apim.getvariable('plan.rate-limit');\n\n//Extract
          request metadata from system variables\nvar requestMethod = apim.getvariable('request.verb');\nvar
          requestURI = apim.getvariable('request.uri');\nvar requestHeaders = apim.getvariable('request.headers');\n\ndelete
          requestHeaders['accept-encoding'];\ndelete requestHeaders['x-global-transaction-id'];\ndelete
          requestHeaders['user-agent'];\ndelete requestHeaders['via'];\n//delete requestHeaders['x-authcode'];\ndelete
          requestHeaders['authorization'];\n\nvar requestHeadersString = JSON.stringify(requestHeaders);\n\nvar
          logString = \"type:=request\"\n                + \" | system-datetime:=\"
          +        systemDateTime\n                + \" | apic-transaction-id:=\"
          +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
          \               + \" | consumer-ip-address:=\" +    clientIPAddress\n                +
          \" | x-ibm-client-id:=\" +        clientId\n                + \" | client-app-name:=\"
          +        clientAppName\n                + \" | client-app-type:=\" +        clientAppType\n
          \               + \" | client-org-name:=\" +        clientOrgName\n                +
          \" | api-name:=\" +               apiName\n                + \" | api-version:=\"
          +            apiVersion\n                + \" | provider-org-name:=\" +
          \     providerOrgName\n                + \" | catalog-name:=\" +           catalogName\n
          \               + \" | api-base-path:=\" +          apiBasePath\n                +
          \" | operation-path:=\" +         operationPath\n                + \" |
          plan-name:=\" +              planName\n                + \" | plan-version:=\"
          +           planVersion\n                + \" | plan-rate-limit:=\" +        planRateLimit\n
          \               + \" | request-http-method:=\" +    requestMethod\n                +
          \" | request-uri:=\" +            requestURI\n                + \" | request-http-headers:=\"
          +   requestHeadersString;\n                \nconsole.log(logString);\nlogString
          = \"\";\napim.setvariable('logString', logString);\n\nfunction uuidv4()
          {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function
          (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r: (r & 0x3
          | 0x8);\n        return v.toString(16);\n    });\n}"
    - xslt:
        version: 2.0.0
        title: XSLT_ValidateBasic
        input: false
        source: "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n
          \   xmlns:str=\"http://exslt.org/strings\"\r\n    xmlns:apim=\"http://www.ibm.com/apimanagement\"\r\n
          \   xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:apigw=\"http://www.ibm.com/xmlns/datapower/2017/11/apigateway\"\r\n
          \   extension-element-prefixes=\"dp apigw\" exclude-result-prefixes=\"apim
          dp apigw\">\r\n    <!--<xsl:import href=\"local:///isp/policy/apim.custom.xsl\"
          /> -->\r\n    <xsl:output method=\"xml\" omit-xml-declaration=\"yes\" indent=\"yes\"/>\r\n
          \   <xsl:strip-space elements=\"*\"/>\r\n    <xsl:template match=\"/\">\r\n
          \       <xsl:variable name=\"authorizationHeader\" select=\"string(apigw:get-variable('request.headers.authorization'))\"/>\r\n
          \       <xsl:variable name=\"encodedAuthorizationHeaders\" select=\"substring-after($authorizationHeader,
          'Basic ')\"/>\r\n        <xsl:variable name=\"decodedUsernamePassword\"
          select=\"dp:decode($encodedAuthorizationHeaders,'base-64')\"/>\r\n        <xsl:variable
          name=\"username\" select=\"substring-before($decodedUsernamePassword, ':')\"/>\r\n
          \       <xsl:variable name=\"password\" select=\"substring-after($decodedUsernamePassword,
          ':')\"/>\r\n        <xsl:choose>  \r\n        <xsl:when test=\"($username
          = 'sky_cadent' and $password = '5LSLreE7')\">\r\n        </xsl:when>\r\n
          \        <xsl:otherwise>\r\n        <!--    <xsl:call-template name=\"apim:error\">\r\n
          \               <xsl:with-param name=\"httpCode\" select=\"'401'\" />\r\n
          \               <xsl:with-param name=\"httpReasonPhrase\" select=\"'Authentication
          Failed'\" />\r\n                <xsl:with-param name=\"errorMessage\" select=\"'Invaild
          Credentails Provided'\" />\r\n            </xsl:call-template>  -->\r\n<apigw:reject\r\n
          \ identifier=\"'Unauthorizaed'\"\r\n  status-code=\"401\"\r\n  reason=\"'Authentication
          Failed'\">Invaild Credentails Provided\r\n</apigw:reject>\r\n        </xsl:otherwise>\r\n
          \       </xsl:choose>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
    - parse:
        version: 2.0.0
        title: parse
        parse-settings-reference:
          default: apic-default-parsesettings
    - validate:
        version: 2.0.0
        title: validate
        input: message
        validate-against: definition
        definition: '#/definitions/CampaignXSD'
    - gatewayscript:
        title: GW_addBasicAuth
        version: 2.0.0
        source: "var apim = require('apim');\r\napim.setvariable('message.headers.apic-transaction-id',
          apim.getvariable('apic-transaction-id'));\r\napim.setvariable('message.headers.authorization',
          'Basic VklSR0lOUk9JOjgxQjg0NDMzQkY3QTgwQzcyMTIwMjA5NkExMTQwOEJCREMzMkYxOEY=');\r\n"
    - invoke:
        title: invokeAdSmart
        timeout: 120
        verb: POST
        cache-response: protocol
        cache-ttl: 900
        version: 2.0.0
        target-url: $(AdsmartEndpoint)
        header-control:
          type: blacklist
          values: []
        parameter-control:
          type: blacklist
          values: []
    - gatewayscript:
        version: 2.0.0
        title: GW_setResponseTranHeader
        source: "var apim = require('apim');\n\n//apim.output('application/xml');\nvar
          errorCode = apim.getvariable('message.status.code');\nif (errorCode == 401
          ) {\n    \nvar error = \"<errorResponse> <httpCode>401</httpCode><httpMessage>Authentication
          Failure.</httpMessage><moreInformation>Authentication Failure</moreInformation></errorResponse>\"\napim.setvariable('message.body',error);\n}\nelse
          if (errorCode == 500 ) {\n\nvar error = \"<errorResponse> <httpCode>500</httpCode><httpMessage>Internal
          Error.</httpMessage><moreInformation>Internal Error</moreInformation></errorResponse>\"\napim.setvariable('message.body',
          error);\n}\n//else if (errorCode == 200 ) {\n//var error =  \"<Response><httpCode>200</httpCode><httpMessage></httpMessage><moreInformation></moreInformation></Response>\"\n//apim.setvariable('message.body',
          error);\n//}\nelse {\n    apim.setvariable('message.headers.apic-transaction-id',
          apim.getvariable('apic-transaction-id'));\n    \n}"
    - gatewayscript:
        version: 2.0.0
        title: GS-ExtractFinalLoggingData
        description: ""
        source: "var apim = require('apim');\r\n//Extract general metadata from system
          variables\r\nvar systemDateTime = apim.getvariable('system.datetime');\r\nvar
          apicTxId = apim.getvariable('apic-transaction-id');\r\nvar xGlobalTxId =
          apim.getvariable('request.headers.x-global-transaction-id');\r\nvar requestURI
          = apim.getvariable('request.uri');\r\n\r\n//Extract response metadata from
          system variables\r\nvar responseHeaders = apim.getvariable('message.headers');\r\n\r\ndelete
          responseHeaders['Accept-Encoding'];\r\ndelete responseHeaders['X-Global-Transaction-ID'];\r\ndelete
          responseHeaders['User-Agent'];\r\ndelete responseHeaders['Via'];\r\ndelete
          responseHeaders['x-authcode'];\r\ndelete responseHeaders['authorization'];\r\ndelete
          responseHeaders['Authorization'];\r\ndelete responseHeaders['Access-Control-Allow-Methods'];\r\ndelete
          responseHeaders['Access-Control-Allow-Origin'];\r\ndelete responseHeaders['Access-Control-Allow-Headers'];\r\ndelete
          responseHeaders['Access-Control-Expose-Headers'];\r\n\r\nvar responseHeadersString
          = JSON.stringify(responseHeaders);\r\nvar responseStatusCode = apim.getvariable('message.status.code');\r\nvar
          responseStatusReason = apim.getvariable('message.status.reason');\r\n//calculate
          time elapsed\r\nvar apiStartTimeMS = apim.getvariable('apiStartTimeMS');\r\nvar
          apiEndTimeMS = (new Date()).getTime();\r\nvar totalTimeElapsed = (apiEndTimeMS
          - apiStartTimeMS) + \" ms\";\r\nvar logString = \"type:=response\"\r\n                +
          \" | system-datetime:=\" +        systemDateTime\r\n                + \"
          | apic-transaction-id:=\" +    apicTxId\r\n                + \" | global-transaction-id:=\"
          +  xGlobalTxId\r\n                + \" | request-uri:=\" +            requestURI\r\n
          \               + apim.getvariable('logString')\r\n                + \"
          | response-http-headers:=\" +  responseHeadersString\r\n                +
          \" | response-status-code:=\" +   responseStatusCode\r\n                +
          \" | response-status-reason:=\" + responseStatusReason\r\n                +
          \" | total-time-elapsed:=\" +     totalTimeElapsed\r\n                +
          \" | Final-response:=\" +     JSON.stringify(apim.getvariable('message.body'))\r\n
          \               ;\r\nconsole.log(logString);"
    catch: []
  phase: realized
  properties:
    AdsmartEndpoint:
      value: http://vm006681.bskyb.com:9000/api/campaigns/upload
      description: ""
      encoded: false
  gateway: datapower-api-gateway
  activity-log:
    enabled: true
    error-content: header
    success-content: activity
  application-authentication:
    certificate: false
  type: rest
tags: []
definitions:
  CampaignXSD:
    type: object
    additionalProperties: false
    x-ibm-schema:
      type: xsd
      file: 
paths:
  /upload:
    post:
      responses:
        "200":
          description: 200 OK
          schema:
            type: object
      parameters:
      - name: x-consumertid
        in: header
        required: false
        type: string
      consumes: []
      produces: []
